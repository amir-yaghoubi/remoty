// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remoty.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Link struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Link) Reset()         { *m = Link{} }
func (m *Link) String() string { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()    {}
func (*Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_020d54a2f6f70a02, []int{0}
}

func (m *Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Link.Unmarshal(m, b)
}
func (m *Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Link.Marshal(b, m, deterministic)
}
func (m *Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Link.Merge(m, src)
}
func (m *Link) XXX_Size() int {
	return xxx_messageInfo_Link.Size(m)
}
func (m *Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Link proto.InternalMessageInfo

func (m *Link) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_020d54a2f6f70a02, []int{1}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Link)(nil), "api.Link")
	proto.RegisterType((*Void)(nil), "api.Void")
}

func init() { proto.RegisterFile("remoty.proto", fileDescriptor_020d54a2f6f70a02) }

var fileDescriptor_020d54a2f6f70a02 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4a, 0xcd, 0xcd,
	0x2f, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x92, 0xe0,
	0x62, 0xf1, 0xc9, 0xcc, 0xcb, 0x16, 0x12, 0xe0, 0x62, 0x2e, 0x2d, 0xca, 0x91, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0xd8, 0xb8, 0x58, 0xc2, 0xf2, 0x33, 0x53, 0x8c, 0x9a, 0x18,
	0xb9, 0x78, 0x83, 0xc0, 0xfa, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x54, 0xb8, 0xb8,
	0x1c, 0x53, 0x52, 0x42, 0xf2, 0x03, 0x4b, 0x53, 0x4b, 0x53, 0x85, 0x38, 0xf5, 0x12, 0x0b, 0x32,
	0xf5, 0x40, 0x86, 0x48, 0x41, 0x98, 0x20, 0x5d, 0x4a, 0x0c, 0x42, 0x4a, 0x5c, 0x1c, 0x2e, 0xf9,
	0xe5, 0x79, 0x39, 0xf9, 0x89, 0x29, 0x38, 0xd5, 0xa8, 0x73, 0xf1, 0x06, 0x97, 0x24, 0x16, 0x95,
	0xa0, 0x29, 0x04, 0xc9, 0xa2, 0x28, 0x4c, 0x62, 0x03, 0x3b, 0xd9, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xb9, 0x2d, 0x28, 0x60, 0xc2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemotyServiceClient is the client API for RemotyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemotyServiceClient interface {
	AddToQueue(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Void, error)
	Download(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Void, error)
	StartDownload(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
}

type remotyServiceClient struct {
	cc *grpc.ClientConn
}

func NewRemotyServiceClient(cc *grpc.ClientConn) RemotyServiceClient {
	return &remotyServiceClient{cc}
}

func (c *remotyServiceClient) AddToQueue(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/api.RemotyService/AddToQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotyServiceClient) Download(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/api.RemotyService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotyServiceClient) StartDownload(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/api.RemotyService/StartDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemotyServiceServer is the server API for RemotyService service.
type RemotyServiceServer interface {
	AddToQueue(context.Context, *Link) (*Void, error)
	Download(context.Context, *Link) (*Void, error)
	StartDownload(context.Context, *Void) (*Void, error)
}

// UnimplementedRemotyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRemotyServiceServer struct {
}

func (*UnimplementedRemotyServiceServer) AddToQueue(ctx context.Context, req *Link) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToQueue not implemented")
}
func (*UnimplementedRemotyServiceServer) Download(ctx context.Context, req *Link) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (*UnimplementedRemotyServiceServer) StartDownload(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDownload not implemented")
}

func RegisterRemotyServiceServer(s *grpc.Server, srv RemotyServiceServer) {
	s.RegisterService(&_RemotyService_serviceDesc, srv)
}

func _RemotyService_AddToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotyServiceServer).AddToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RemotyService/AddToQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotyServiceServer).AddToQueue(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotyService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotyServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RemotyService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotyServiceServer).Download(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotyService_StartDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotyServiceServer).StartDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RemotyService/StartDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotyServiceServer).StartDownload(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemotyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RemotyService",
	HandlerType: (*RemotyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToQueue",
			Handler:    _RemotyService_AddToQueue_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _RemotyService_Download_Handler,
		},
		{
			MethodName: "StartDownload",
			Handler:    _RemotyService_StartDownload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remoty.proto",
}
